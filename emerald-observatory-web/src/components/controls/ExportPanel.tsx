import React, { useState } from 'react';
import { DateTime } from 'luxon';
import { LocationCoordinates } from '../../services/LocationService';

interface ExportPanelProps {
  currentTime: DateTime;
  location: LocationCoordinates;
  className?: string;
}

interface ObservationData {
  timestamp: string;
  location: LocationCoordinates;
  timezone: string;
  notes?: string;
  objects?: Array<{
    name: string;
    position: { azimuth: number; altitude: number };
    magnitude?: number;
    visible: boolean;
  }>;
}

export function ExportPanel({ currentTime, location, className = '' }: ExportPanelProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [notes, setNotes] = useState('');
  const [exportFormat, setExportFormat] = useState<'json' | 'csv' | 'txt'>('json');
  const [shareUrl, setShareUrl] = useState('');

  const generateObservationData = (): ObservationData => {
    return {
      timestamp: currentTime.toISO(),
      location,
      timezone: currentTime.zoneName,
      notes: notes || undefined
    };
  };

  const exportAsJSON = () => {
    const data = generateObservationData();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    downloadFile(blob, `observatory-${currentTime.toFormat('yyyy-MM-dd-HHmm')}.json`);
  };

  const exportAsCSV = () => {
    const data = generateObservationData();
    const csv = [
      'Timestamp,Latitude,Longitude,Timezone,Notes',
      `${data.timestamp},${data.location.latitude},${data.location.longitude},${data.timezone},"${data.notes || ''}"`
    ].join('\n');
    
    const blob = new Blob([csv], { type: 'text/csv' });
    downloadFile(blob, `observatory-${currentTime.toFormat('yyyy-MM-dd-HHmm')}.csv`);
  };

  const exportAsText = () => {
    const data = generateObservationData();
    const text = [
      'Emerald Observatory - Observation Report',
      '=' .repeat(40),
      '',
      `Date & Time: ${currentTime.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ')}`,
      `Location: ${data.location.latitude.toFixed(6)}¬∞, ${data.location.longitude.toFixed(6)}¬∞`,
      `Timezone: ${data.timezone}`,
      '',
      'Coordinates:',
      `  Latitude:  ${data.location.latitude.toFixed(6)}¬∞`,
      `  Longitude: ${data.location.longitude.toFixed(6)}¬∞`,
      '',
      data.notes ? `Notes:\n${data.notes}` : '',
      '',
      '---',
      'Generated by Emerald Observatory Web',
      `Report created: ${DateTime.now().toFormat('yyyy-MM-dd HH:mm:ss ZZZZ')}`
    ].filter(Boolean).join('\n');
    
    const blob = new Blob([text], { type: 'text/plain' });
    downloadFile(blob, `observatory-${currentTime.toFormat('yyyy-MM-dd-HHmm')}.txt`);
  };

  const downloadFile = (blob: Blob, filename: string) => {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateShareUrl = () => {
    const params = new URLSearchParams({
      lat: location.latitude.toString(),
      lng: location.longitude.toString(),
      time: currentTime.toISO(),
      tz: currentTime.zoneName
    });
    
    const url = `${window.location.origin}${window.location.pathname}?${params.toString()}`;
    setShareUrl(url);
    return url;
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      // You could add a toast notification here
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const shareViaWebAPI = async () => {
    if (!navigator.share) return;
    
    const data = generateObservationData();
    
    try {
      await navigator.share({
        title: 'Emerald Observatory - Astronomical Observation',
        text: `Astronomical observation at ${currentTime.toFormat('yyyy-MM-dd HH:mm')} from ${location.latitude.toFixed(3)}¬∞, ${location.longitude.toFixed(3)}¬∞`,
        url: generateShareUrl()
      });
    } catch (err) {
      console.error('Error sharing:', err);
    }
  };

  const exportData = () => {
    switch (exportFormat) {
      case 'json':
        exportAsJSON();
        break;
      case 'csv':
        exportAsCSV();
        break;
      case 'txt':
        exportAsText();
        break;
    }
  };

  return (
    <div className={`glass-panel ${className}`}>
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-semibold text-white flex items-center gap-2">
            <span>üì§</span>
            Export & Share
          </h3>
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="text-sm text-gray-400 hover:text-white transition-colors"
          >
            {isExpanded ? 'Collapse' : 'Expand'}
          </button>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-4">
          <button
            onClick={exportAsJSON}
            className="btn-secondary flex items-center gap-2"
          >
            <span>üíæ</span>
            Quick Export JSON
          </button>
          
          {navigator.share && (
            <button
              onClick={shareViaWebAPI}
              className="btn-secondary flex items-center gap-2"
            >
              <span>üîó</span>
              Share Observation
            </button>
          )}
          
          <button
            onClick={() => copyToClipboard(generateShareUrl())}
            className="btn-secondary flex items-center gap-2"
          >
            <span>üìã</span>
            Copy Link
          </button>
          
          <button
            onClick={() => {
              const data = JSON.stringify(generateObservationData(), null, 2);
              copyToClipboard(data);
            }}
            className="btn-secondary flex items-center gap-2"
          >
            <span>üìù</span>
            Copy Data
          </button>
        </div>

        {isExpanded && (
          <div className="space-y-6">
            {/* Notes Section */}
            <div>
              <label className="block text-sm font-medium text-blue-300 mb-2">
                Observation Notes
              </label>
              <textarea
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                placeholder="Add notes about your observation, weather conditions, equipment used, etc..."
                className="w-full h-24 bg-black/30 border border-white/20 rounded px-3 py-2 text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none resize-none"
              />
            </div>

            {/* Export Options */}
            <div>
              <h4 className="text-lg font-medium text-purple-300 mb-3">Export Options</h4>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm text-gray-400 mb-2">Export Format</label>
                  <div className="flex gap-2">
                    {[
                      { value: 'json', label: 'JSON', icon: 'üìÑ' },
                      { value: 'csv', label: 'CSV', icon: 'üìä' },
                      { value: 'txt', label: 'Text', icon: 'üìù' }
                    ].map((format) => (
                      <button
                        key={format.value}
                        onClick={() => setExportFormat(format.value as any)}
                        className={`flex items-center gap-2 px-3 py-2 rounded text-sm transition-colors ${
                          exportFormat === format.value
                            ? 'bg-blue-600 text-white'
                            : 'bg-gray-600 hover:bg-gray-500 text-gray-300'
                        }`}
                      >
                        <span>{format.icon}</span>
                        {format.label}
                      </button>
                    ))}
                  </div>
                </div>

                <button
                  onClick={exportData}
                  className="w-full btn-primary flex items-center justify-center gap-2"
                >
                  <span>‚¨áÔ∏è</span>
                  Export as {exportFormat.toUpperCase()}
                </button>
              </div>
            </div>

            {/* Share Options */}
            <div>
              <h4 className="text-lg font-medium text-green-300 mb-3">Share Options</h4>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm text-gray-400 mb-2">Shareable URL</label>
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={shareUrl || generateShareUrl()}
                      readOnly
                      className="flex-1 bg-black/30 border border-white/20 rounded px-3 py-2 text-white text-sm focus:border-blue-400 focus:outline-none"
                    />
                    <button
                      onClick={() => copyToClipboard(shareUrl || generateShareUrl())}
                      className="btn-secondary px-3"
                    >
                      üìã
                    </button>
                  </div>
                  <p className="text-xs text-gray-400 mt-1">
                    Share this URL to show others your exact observation time and location
                  </p>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  <button
                    onClick={() => {
                      const url = generateShareUrl();
                      const text = `Check out this astronomical observation from ${currentTime.toFormat('yyyy-MM-dd HH:mm')}`;
                      window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`, '_blank');
                    }}
                    className="btn-secondary text-sm flex items-center gap-2"
                  >
                    <span>üê¶</span>
                    Tweet
                  </button>
                  
                  <button
                    onClick={() => {
                      const url = generateShareUrl();
                      const text = `Astronomical observation: ${currentTime.toFormat('yyyy-MM-dd HH:mm')}`;
                      window.open(`mailto:?subject=${encodeURIComponent(text)}&body=${encodeURIComponent(`${text}\n\n${url}`)}`, '_blank');
                    }}
                    className="btn-secondary text-sm flex items-center gap-2"
                  >
                    <span>üìß</span>
                    Email
                  </button>
                </div>
              </div>
            </div>

            {/* Data Preview */}
            <div>
              <h4 className="text-lg font-medium text-orange-300 mb-3">Data Preview</h4>
              <div className="bg-black/30 border border-white/20 rounded p-3 overflow-auto">
                <pre className="text-sm text-gray-300 whitespace-pre-wrap">
                  {JSON.stringify(generateObservationData(), null, 2)}
                </pre>
              </div>
            </div>

            {/* Information */}
            <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
              <h5 className="font-medium text-blue-300 mb-2">Export Information</h5>
              <div className="text-sm text-gray-300 space-y-1">
                <p>‚Ä¢ JSON: Complete structured data for analysis</p>
                <p>‚Ä¢ CSV: Spreadsheet-compatible format</p>
                <p>‚Ä¢ TXT: Human-readable observation report</p>
                <p>‚Ä¢ Share URLs preserve exact time and location</p>
                <p>‚Ä¢ All exports include UTC timestamps for precision</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 